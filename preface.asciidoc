[preface]
== Preface

This book will teach you the technology of Bitcoin at a fundamental level.
It doesn't cover the monetary, economic, or social dynamics of Bitcoin, but knowing how Bitcoin works under the hood should give you greater insight into what's possible.
There's a tendency to hype Bitcoin and blockchain without really understanding what's going on; this book is meant to be an antidote to that tendency.

After all, there are lots of books about Bitcoin, everything from the history of Bitcoin, the economic aspects to a technical description of Bitcoin.
The aim of this book is to get you to understand Bitcoin by coding all of the components necessary for a Bitcoin library.
The library is not meant to be exhaustive or efficient.
The aim of the library is to help you learn.

=== Who Is This Book for?

This book is for programmers who want to learn how Bitcoin works by coding it themselves.
You will learn Bitcoin by coding the "bare metal" stuff in a Bitcoin library you will create from scratch.
This is not a reference book where you can look up the specification for a particular feature.

The material from this book has been largely taken from my two-day seminar where I teach developers all about Bitcoin (see https://programmingblockchain.com[]).
The material has been refined extensively, as I've taught this material more than 20 times and have taught more than 400 people as of this writing.

By the time you're done with the book, you'll not only be able to create transactions, but also get all the data you need from peers and send the transaction over the network.
It covers everything needed to accomplish this, including the math, parsing, network connectivity, and block validation.

=== What Do I Need to Know?

The prerequisites for this book are that you know programming, Python in particular.
The library itself is written in Python 3, and a lot of the exercises can be done in a controlled environment like a Jupyter notebook.
An intermediate knowledge of Python is preferable, but even a beginning knowledge of Python is probably sufficient to get a lot of the concepts.

Some knowledge of math is required, especially for Chapters pass:[<a data-type="xref" data-xrefstyle="select:labelnumber" href="#chapter_finite_fields">#chapter_finite_fields</a> and <a data-type="xref" data-xrefstyle="select:labelnumber" href="#chapter_elliptic_curves">#chapter_elliptic_curves</a>].
These chapters introduce mathematical concepts probably not familiar to those who didn't major in mathematics.
Math knowledge around algebra level should suffice to understand the new concepts and to code the exercises covered in those chapters.

General computer science knowledge like hash functions will come in handy, but are not strictly necessary to complete the exercises in this book.

=== How Is the Book Arranged?

This book is split into 14 chapters. Each is meant to build on the previous one as the Bitcoin library gets built from scratch all the way to the end.

Roughly speaking, Chapters pass:[<a data-type="xref" data-xrefstyle="select:labelnumber" href="#chapter_finite_fields">#chapter_finite_fields</a>–<a data-type="xref" data-xrefstyle="select:labelnumber" href="#chapter_serialization">#chapter_serialization</a>] establish the mathematical tools that we need; Chapters pass:[<a data-type="xref" data-xrefstyle="select:labelnumber" href="#chapter_tx_parsing">#chapter_tx_parsing</a>–<a data-type="xref" data-xrefstyle="select:labelnumber" href="#chapter_p2sh">#chapter_p2sh</a>] cover Transactions, which are the fundamental unit of Bitcoin; and Chapters pass:[<a data-type="xref" data-xrefstyle="select:labelnumber" href="#chapter_blocks">#chapter_blocks</a>–<a data-type="xref" data-xrefstyle="select:labelnumber" href="#chapter_bloom_filters">#chapter_bloom_filters</a>] cover Blocks and Networking.
The last two chapters cover some advanced topics but don't actually require you to write code.

Chapters pass:[<a data-type="xref" data-xrefstyle="select:labelnumber" href="#chapter_finite_fields">#chapter_finite_fields</a> and <a data-type="xref" data-xrefstyle="select:labelnumber" href="#chapter_elliptic_curves">#chapter_elliptic_curves</a>] cover some math that we need.
Finite Fields and Elliptic Curves are needed to understand Elliptic Curve Cryptography in <<chapter_elliptic_curve_cryptography>>.
After we've established the Public Key Cryptography at the end of <<chapter_elliptic_curve_cryptography>>, <<chapter_serialization>> adds parsing and serialization, which are how cryptographic primitives are stored and transmitted.

<<chapter_tx_parsing>> covers the Transaction structure.
<<chapter_script>> goes into the smart contract language behind Bitcoin called Script.
<<chapter_tx>> combines all the previous chapters in validating and creating transactions based on the Elliptic Curve Cryptography from the first four chapters.
<<chapter_p2sh>> establishes how p2sh works, which is a way to make more powerful smart contracts.

<<chapter_blocks>> covers Blocks, which are groups of ordered Transactions.
<<chapter_networking>> covers network communication in Bitcoin.
<<chapter_spv>> and <<chapter_bloom_filters>> go into how a light client, or software without access to the entire blockchain, might request and broadcast data to and from nodes that store the entire blockchain.

<<chapter_segwit>> covers Segwit, a backward-compatible upgrade introduced in 2017, and <<chapter_advanced>> covers suggestions for further study.
Again, these chapters are not strictly necessary, but are included as a way to give you a taste of what more there is to learn.

Chapters pass:[<a data-type="xref" data-xrefstyle="select:labelnumber" href="#chapter_finite_fields">#chapter_finite_fields</a>–<a data-type="xref" data-xrefstyle="select:labelnumber" href="#chapter_bloom_filters">#chapter_bloom_filters</a>] have exercises that require you to build up the library from scratch.
The answers are in <<appendix_solutions>> and in the corresponding chapter directory in the GitHub repository (https://github.com/jimmysong/programmingbitcoin).
You will be writing many Python classes and building toward not just validating transactions/blocks, but also creating your own transactions and broadcasting them on the network.

The last exercise in <<chapter_bloom_filters>> specifically asks you to connect to another node on the testnet network, calculate what you can spend, construct and sign a transaction of your devising, and broadcast that on the network.
The first 11 chapters essentially prepare you for this exercise.

There will be a lot of unit tests that your code will need to pass.
The book has been designed this way so you can do the "fun" part of coding.
To aid your progress, we will be looking at a lot of code and diagrams throughout.

=== Setting Up

To get the most out of this book, you'll want to create an environment where you can run the example code and do the exercises.
Here are the instructions for setting everything up.

Install Python 3.5 or higher on your machine:

Windows:: https://www.python.org/ftp/python/3.6.2/python-3.6.2-amd64.exe[]

Mac OS X:: https://www.python.org/ftp/python/3.6.2/python-3.6.2-macosx10.6.pkg[]

Linux:: See your distro docs (many Linux distributions like Ubuntu come with Python 3.5+ pre-installed)

Install pip by downloading this script:

https://bootstrap.pypa.io/get-pip.py[]

Run this script using Python 3:

[source,bash]
----
$ python3 get-pip.py
----

Install git:

The instructions for downloading and installing are at https://git-scm.com/downloads[].

Download the source code for this book:

[source,bash]
----
$ git clone https://github.com/jimmysong/programmingbitcoin
$ cd programmingbitcoin
----

Install virtualenv:

[source,bash]
----
$ pip install virtualenv
----

Install the requirements:

Linux/OSX:

[source,bash]
----
$ virtualenv -p python3 .venv
$ . .venv/bin/activate
(.venv) $ pip install -r requirements.txt
----

Windows:

----
C:\programmingbitcoin> virtualenv -p C:\PathToYourPythonInstallation\Python.exe .venv
C:\programmingbitcoin> .venv\Scripts\activate.bat
C:\programmingbitcoin> pip install -r requirements.txt
----

Run Jupyter Notebook:

[source,bash]
----
(.venv) $ jupyter notebook
[I 11:13:23.061 NotebookApp] Serving notebooks from local directory:
  /home/jimmy/programmingbitcoin
[I 11:13:23.061 NotebookApp] The Jupyter Notebook is running at:
[I 11:13:23.061 NotebookApp] http://localhost:8888/?token=
  f849627e4d9d07d2158e3fcde93590eff4a9a7a01f65a8e7
[I 11:13:23.061 NotebookApp] Use Control-C to stop this server and shut down all kernels 
  (twice to skip confirmation).
[C 11:13:23.065 NotebookApp]

    Copy/paste this URL into your browser when you connect for the first time,
    to login with a token:
        http://localhost:8888/?token=f849627e4d9d07d2158e3fcde93590eff4a9a7a01f65a8e7
----

You should have a browser open up automatically, as shown in <<pr0001>>.

[[pr0001]]
.Jupyter
image::images/prbc_0001.png[Jupyter]

Here's how to navigate to chapter directories. To do the exercises from <<chapter_finite_fields>>, you would navigate to _code-ch01_ (<<pr0002>>):

[[pr0002]]
.Jupyter directory view
image::images/prbc_0002.png[Chapter 1 Directory]

From here you can open _Chapter1.ipynb_ (<<pr0003>>):

[[pr0003]]
.Jupyter Notebook
image::images/prbc_0003.png[Chapter 1 Notebook]

You may want to familiarize yourself with this interface if you haven't seen it before, but the gist of Jupyter is that it can run Python code from the browser in a way to make experimenting easy.
You can run each "cell" and see the results as if this were an interactive Python shell.

A large portion of the exercises will be coding concepts introduced in the book.
The unit tests are written for you, and you will need to write the Python code to make the tests pass.
You can check whether your code is correct directly in Jupyter.
You will need to edit the corresponding file by clicking through a link like the "this test" link in <<pr0003>>.
This will take you to a browser tab, as shown in <<pr0003>>.

[[pr0004]]
.ecc.py
image::images/prbc_0004.png[Chapter 1 ecc.py]

To make the test pass, edit the file here and save.

=== Answers

All the answers to the various exercises in this book are in <<appendix_solutions>>.
They are also available in the __code-ch<xx>/answers.py__ file where +xx+ is the chapter that you're on.

=== Conventions Used in This Book

The following typographical conventions are used in this book:

_Italic_:: Indicates new terms, URLs, email addresses, filenames, and file extensions.

+Constant width+:: Used for program listings, as well as within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords.

**`Constant width bold`**:: Shows commands or other text that should be typed literally by the user.

_++Constant width italic++_:: Shows text that should be replaced with user-supplied values or by values determined by context.


[TIP]
====
This element signifies a tip or suggestion.
====

[NOTE]
====
This element signifies a general note.
====

[WARNING]
====
This element indicates a waning or caution.
====

=== Using Code Examples
++++
<!--PROD: Please reach out to author to find out if they will be uploading code examples to oreilly.com or their own site (e.g., GitHub).
If there is no code download, delete this whole section.
If there is, when you email digidist with the link, let them know what you filled in for title_title (should be as close to book title as possible, i.e., leaning_python_2e).
This info will determine where digidist loads the files.-->
++++

Supplemental material (code examples, exercises, etc.) is available for download at link:$$https://github.com/jimmysong/programmingbitcoin$$[].

This book is here to help you get your job done.
In general, if example code is offered with this book, you may use it in your programs and documentation.
You do not need to contact us for permission unless you’re reproducing a significant portion of the code.
For example, writing a program that uses several chunks of code from this book does not require permission.
Selling or distributing a CD-ROM of examples from O’Reilly books does require permission.
Answering a question by citing this book and quoting example code does not require permission.
Incorporating a significant amount of example code from this book into your product’s documentation does require permission.

We appreciate, but do not require, attribution.
An attribution usually includes the title, author, publisher, and ISBN.
For example: “_Programming Bitcoin_ by Jimmy Song (O’Reilly).
Copyright 2019, 978-1-492-03149-9.”

If you feel your use of code examples falls outside fair use or the permission given above, feel free to contact us at pass:[<a class="email" href="mailto:permissions@oreilly.com"><em>permissions@oreilly.com</em></a>].

=== O'Reilly Safari

[role = "safarienabled"]
[NOTE]
====
pass:[<a href="http://oreilly.com/safari" class="orm:hideurl"><em class="hyperlink">Safari</em></a>] (formerly Safari Books Online) is a membership-based training and reference platform for enterprise, government, educators, and individuals.
====

Members have access to thousands of books, training videos, Leaning Paths, interactive tutorials, and curated playlists from over 250 publishers, including O’Reilly Media, Harvard Business Review, Prentice Hall Professional, Addison-Wesley Professional, Microsoft Press, Sams, Que, Peachpit Press, Adobe, Focal Press, Cisco Press, John Wiley & Sons, Syngress, Morgan Kaufmann, IBM Redbooks, Packt, Adobe Press, FT Press, Apress, Manning, New Riders, McGraw-Hill, Jones & Bartlett, and Course Technology, among others.

For more information, please visit pass:[<a href="http://oreilly.com/safari" class="orm:hideurl"><em>http://oreilly.com/safari</em></a>].

=== How to Contact Us

Please address comments and questions concerning this book to the publisher:

++++
<ul class="simplelist">
  <li>O’Reilly Media, Inc.</li>
  <li>1005 Gravenstein Highway North</li>
  <li>Sebastopol, CA 95472</li>
  <li>800-998-9938 (in the United States or Canada)</li>
  <li>707-829-0515 (intenational or local)</li>
  <li>707-829-0104 (fax)</li>
</ul>
++++

We have a web page for this book, where we list errata, examples, and any additional information.
You can access this page at http://bit.ly/programmingBitcoin[].

To comment or ask technical questions about this book, send email to pass:[<a class="email" href="mailto:bookquestions@oreilly.com"><em>bookquestions@oreilly.com</em></a>].

For more information about our books, courses, conferences, and news, see our website at link:$$http://www.oreilly.com$$[].

Find us on Facebook: link:$$http://facebook.com/oreilly$$[]

Follow us on Twitter: link:$$http://twitter.com/oreillymedia$$[]

Watch us on YouTube: link:$$http://www.youtube.com/oreillymedia$$[]

=== Acknowledgments



